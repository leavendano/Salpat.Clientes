@page "/add-cliente"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ILogger<AddCliente> logger
@using MediatR
@using Salpat.Clientes.UseCases.Clientes.Create
@using Salpat.Clientes.UseCases.Clientes.Get
@using Ardalis.Result
@inject IMediator  _mediator
@attribute [Authorize]

<PageTitle>Nuevo Cliente</PageTitle>
    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">@mensajeAlerta</RadzenAlert>
        <RadzenTemplateForm TItem="ClienteDTO" Data="@item" Visible="@(item != null)" Submit="@FormSubmit"> 
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Nombre" Component="nombre" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@item!.Nombre" Name="nombre" />
                    <RadzenRequiredValidator Component="nombre" Text="El nombre es requerido" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Telefono" Component="Phone" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenMask Mask="(***) ***-****" CharacterPattern="[0-9]" Placeholder="(000) 000-0000" Name="Phone" @bind-Value="@item!.Telefono" Change=@(args => OnChange(args, "Telephone")) 
        Style="width: 100%;" aria-label="Phone" />
                    <RadzenRequiredValidator Component="Phone" Text="El número telefónico es requerido" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Correo" Component="email" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@item!.Email" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="el Correo electrónico es requerido" />
                    <RadzenEmailValidator Component="Email" Text="Proporcione una dirección valida de correo" Style="position: absolute" />
                </RadzenColumn>
            </RadzenRow>
          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code {

    protected class ClienteDTO
    {
        
        public string Nombre {get; set;} = string.Empty;
        public string Telefono {get; set;} = string.Empty;
        public string Email {get;set;} = string.Empty;

    }
    protected override void OnInitialized()
    {
            item ??= new();
    }
    protected bool errorVisible;
    protected string mensajeAlerta = "No se guardo el registro";
    [SupplyParameterFromForm]
    protected ClienteDTO item {get; set;} = new();

    protected async Task FormSubmit()
    {
        
        try
        {
            var resultTelefono = await _mediator.Send(new GetClienteByTelefonoQuery(item.Telefono));
            if(resultTelefono.Status != ResultStatus.NotFound)
            {
               @*  NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error,
                 Summary = "El telefono ya existe en la base de datos",
                  Detail = "Error Detail", Duration = 4000 }); *@
                mensajeAlerta = "El telefono ya existe en la base de datos";
                errorVisible = true;
                return;
            }

            var result = await _mediator.Send(new CreateClienteCommand(item.Nombre,item.Telefono,item.Email));
                DialogService.Close(item);
            
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error,
                 Summary = e.Message,
                  Detail = "Error Detail", Duration = 4000 });
            mensajeAlerta = "ocurrió un error de la base de datos";
            errorVisible = true;
        }
        
    }

    void OnChange(string value, string name)
    {
        logger.LogInformation($"{name} se cambió a  {value}");
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        await Task.Run(() => DialogService.Close(null));
    }
}
