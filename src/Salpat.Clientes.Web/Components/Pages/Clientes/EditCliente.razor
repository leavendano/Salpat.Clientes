@page "/edit-cliente"
@using MediatR
@using Salpat.Clientes.UseCases.Clientes.Get
@using Salpat.Clientes.UseCases.Clientes.Update
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject IMediator _mediator
@attribute [Authorize]

<PageTitle>Editar Cliente</PageTitle>

    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">No puedo guardar  los datos</RadzenAlert>
        <RadzenTemplateForm TItem="ClienteDTO" Data="@item" Visible="@(item != null)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Nombre" Component="nombre" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@item!.Nombre" Name="nombre" />
                    <RadzenRequiredValidator Component="nombre" Text="El nombre es requerido" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Telefono" Component="Phone" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenMask Mask="(***) ***-****" CharacterPattern="[0-9]" Placeholder="(000) 000-0000" Name="Phone" @bind-Value="@item!.Telefono" 
        Style="width: 100%;" aria-label="Phone" />
                    <RadzenRequiredValidator Component="Phone" Text="El número telefónico es requerido" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Correo" Component="email" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@item!.Email" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="el Correo electrónico es requerido" />
                    <RadzenEmailValidator Component="Email" Text="Proporcione una dirección valida de correo" Style="position: absolute" />
                </RadzenColumn>
            </RadzenRow>
          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code {

    protected class ClienteDTO
    {
        public int Id {get;set;}
        public string Nombre {get; set;} = string.Empty;
        public string Telefono {get; set;}  = string.Empty;
        public string Email {get; set;}  = string.Empty;

    }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _mediator.Send(new GetClienteQuery(Id));
        if (result.IsSuccess)
        {
            item.Id = result.Value.Id;
            item.Nombre = result.Value.Nombre;
            item.Telefono = result.Value.Telefono;
            item.Email = result.Value.Email;
        }

    }
    protected bool errorVisible;
    protected ClienteDTO item {get; set;} = new();

    protected async Task FormSubmit()
    {

        try
        {
            var result = await _mediator.Send(new UpdateClienteCommand(item.Id, item.Nombre, item.Telefono, item.Email));
            DialogService.Close(item);
        }
        catch (Exception)
        {
            errorVisible = true;
        }
        
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        await Task.Run(() => DialogService.Close(null));
    }
}
