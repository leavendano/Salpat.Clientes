@page "/empresas"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ILogger<ListEmpresas> logger
@using MediatR
@inject IMediator _mediator
@using Salpat.Clientes.UseCases.Empresas
@using Ardalis.Result
@using Salpat.Clientes.UseCases.Empresas.Delete
@using Salpat.Clientes.UseCases.Empresas.List
@attribute [Authorize]


<PageTitle>Empresas</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Empresas" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Nuevo" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@listado" TItem="EmpresaDTO" RowSelect="@EditRow">
                <Columns>
                    <RadzenDataGridColumn TItem="EmpresaDTO" Property="Id" Title="Id">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmpresaDTO" Property="Nombre" Title="Nombre">
                    </RadzenDataGridColumn>
                   
                    <RadzenDataGridColumn TItem="EmpresaDTO" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="empresa">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, empresa)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    protected IEnumerable<EmpresaDTO>? listado;

    protected RadzenDataGrid<EmpresaDTO> grid0 = new();
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        Result<IEnumerable<EmpresaDTO>> result = await _mediator.Send(new ListEmpresasQuery(null, null));

        if (result.IsSuccess)
        {
            listado = result.Value;
        }

    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddEmpresa>("Agregar Recompensa", null);
        Result<IEnumerable<EmpresaDTO>> result = await _mediator.Send(new ListEmpresasQuery(null, null));

        if (result.IsSuccess)
        {

            listado = result.Value;
            await grid0.Reload();
        }

    }

    
    

    protected async Task EditRow(EmpresaDTO args)
    {
        await DialogService.OpenAsync<EditEmpresa>("Editar elemento", new Dictionary<string, object> { { "Id", args.Id } });
        Result<IEnumerable<EmpresaDTO>> result = await _mediator.Send(new ListEmpresasQuery(null, null));
        if (result.IsSuccess)
        {

            listado = result.Value;
            await grid0.Reload();
        }
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, EmpresaDTO recompensa)
    {
        try
        {
            if (await DialogService.Confirm("Est√° seguro de dar de baja este elemento?") == true)
            {

                var result = await _mediator.Send(new DeleteEmpresaCommand(recompensa.Id));

                if (result.IsSuccess)
                {
                    Result<IEnumerable<EmpresaDTO>> result2 = await _mediator.Send(new ListEmpresasQuery(null, null));
                    if (result2.IsSuccess)
                    {
                        listado = result2.Value;
                        await grid0.Reload();
                    }

                }
            }
        }
        catch (Exception e)
        {
            logger.LogError(0, e, "Error al dar de baja un elemento");
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Imposible dar de baja el elemento"
                });
        }
    }

}
